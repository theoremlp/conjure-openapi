apply plugin: 'application'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

application {
    mainClass = 'com.theoremlp.conjure.openapi.OpenApiCli'
}

dependencies {
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.google.guava:guava'
    implementation 'com.palantir.conjure:conjure-api-objects'
    implementation 'com.palantir.conjure:conjure-generator-common'
    implementation 'info.picocli:picocli'
    implementation 'io.swagger.core.v3:swagger-models'

    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'com.palantir.conjure:conjure-core'
}

distTar.compression = Compression.GZIP
distZip.enabled = false

publishing {
    publications {
        mavenTgz(MavenPublication) {
            artifact distTar
            suppressPomMetadataWarningsFor("javadocElements")
            pom {
                name = "conjure-openapi"
                description = "Conjure generator for OpenApi"
                url = "https://github.com/theoremlp/conjure-openapi"
                licenses {
                    license {
                        name = "Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0"
                    }
                }
                developers {
                    developer {
                        id = "theoremlp"
                        name = "TheoremLp"
                        email = "clip@theoremlp.com"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/theoremlp/conjure-openapi.git"
                    developerConnection = "scm:git:https://github.com/theoremlp/conjure-openapi.git"
                    url = "https://github.com/theoremlp/conjure-openapi"
                }
            }
        }
    }
}

signing {
    def signingKey = System.env.SIGNING_KEY
    def signingPassword = System.env.SIGNING_PASSWORD
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}
